package yaber

var tmplDevAsset = `// +build !embed

// Automagically generated by yaber (https://github.com/lmas/yaber),
// please avoid editting this file as it might be regenerated again.

package {{.pkgName}}

import (
        "io/ioutil"
        "path/filepath"
)

func Asset(path string) ([]byte, error) {
	return ioutil.ReadFile(path)
}

func AssetDir(dir string) (map[string][]byte, error) {
        tmp, e := ioutil.ReadDir(dir)
        if e != nil {
                return nil, e
        }

        files := make(map[string][]byte)
        for _, f := range tmp {
                name := filepath.Join(dir, f.Name())
                body, e := ioutil.ReadFile(name)
                if e != nil {
                        return nil, e
                }
                files[name] = body
        }
        return files, nil
}
`

var tmplBuildAsset = `// +build embed

// Automagically generated by yaber (https://github.com/lmas/yaber),
// please avoid editting this file as it might be regenerated again.

package {{.pkgName}}

import (
        "bytes"
        "compress/gzip"
        "io/ioutil"
        "os"
        "strings"
)

func Asset(path string) ([]byte, error) {
        body, ok := _rawAssets[path]
        if !ok {
                return nil, os.ErrNotExist
        }
        return decompress(body)
}

func AssetDir(dir string) (map[string][]byte, error) {
        var e error
        files := make(map[string][]byte)
        for path, body := range _rawAssets {
                if strings.HasPrefix(path, dir) {
                        files[path], e = decompress(body)
                        if e != nil {
                                return nil, e
                        }
                }
        }
        return files, nil
}

func decompress(data []byte) ([]byte, error) {
        buf := bytes.NewBuffer(data)
        gr, e := gzip.NewReader(buf)
        if e != nil {
                return nil, e
        }
        defer gr.Close()
        return ioutil.ReadAll(gr)
}

var _rawAssets = map[string][]byte{
{{range $path, $body := .fileData}}
	"{{$path}}": []byte({{printf "%+q" $body}}),
{{end -}}
}
`

// The "{{end -}}
// }
// `" part is a bit of a hack to ensure we get a correctly gofmt'ed output file
// and makes git shut up about "No newline at end of file".
