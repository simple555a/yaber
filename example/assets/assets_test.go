// Code generated by yaber v0.3 (https://github.com/lmas/yaber)
// DO NOT EDIT.

package assets

import (
	"bytes"
	"os"
	"testing"
)

var oldDir string

func chDir() {
	// Must go up a dir because go test enters the dir with the currently
	// running test file.
	var e error
	oldDir, e = os.Getwd()
	if e != nil {
		panic(e)
	}
	e = os.Chdir("..")
	if e != nil {
		panic(e)
	}
}

func restoreDir() {
	e := os.Chdir(oldDir)
	if e != nil {
		panic(e)
	}
}

func testFile(t *testing.T, path string, body []byte) {
	b, e := Asset(path)
	if e != nil {
		t.Errorf("Unexpected error when reading%s: %s", path, e.Error())
	}
	if len(b) != len(body) {
		t.Errorf("Unexpected length of %s, excpected=%d, got=%d", path, len(body), len(b))
	}
	if !bytes.Equal(b, body) {
		t.Errorf("File contents doesn't match for %s", path)
	}
}

func TestSingleFile(t *testing.T) {
	chDir()
	defer restoreDir()
	// First embedded file and it's compressed body.
	name := "templates/aaa.txt"
	body, e := decompress([]byte("\x1f\x8b\b\x00\x00\tn\x88\x00\xff\n\xc9\xc8,VH\xcb\xccIU\x00\xd2Y\xa5\xc5%\n\x89\n%\xa9\xc5%z\\\x00\x00\x00\x00\xff\xff\x01\x00\x00\xff\xff\x9d\xc5\x12$\x1a\x00\x00\x00"))
	if e != nil {
		t.Errorf("Unexpected error when decompressing test file body: %s", e.Error())
	}
	// Compare against embedded file.
	SetRawAssets(false)
	testFile(t, name, body)

	// Compare against real file on disk.
	SetRawAssets(true)
	testFile(t, name, body)
}

func testDir(t *testing.T, dir string, fileNames []string) {
	hasFile := func(f string) bool {
		for _, n := range fileNames {
			if n == f {
				return true
			}
		}
		return false
	}

	// TODO: handle multiple dirs
	files, e := AssetDir(dir)
	if e != nil {
		t.Errorf("Unexpected error while reading: %s", e.Error())
	}

	if len(fileNames) != len(files) {
		t.Errorf("Unexpected file amount, expected=%d, got=%d", len(fileNames), len(files))
	}

	for f, _ := range files {
		if !hasFile(f) {
			t.Errorf("Missing file %s in directory", f)
		}
	}
}

func TestAllFiles(t *testing.T) {
	chDir()
	defer restoreDir()
	// List of all embedded files.
	names := []string{

		"templates/aaa.txt",

		"templates/empty_file",

		"templates/hello",
	}

	// List of all dirs.
	dirs := []string{

		"templates/",
	}

	SetRawAssets(false)
	for _, d := range dirs {
		testDir(t, d, names)
	}

	SetRawAssets(true)
	for _, d := range dirs {
		testDir(t, d, names)
	}
}
